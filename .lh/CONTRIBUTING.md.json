{
    "sourceFile": "CONTRIBUTING.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1749928771437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1749928771437,
            "name": "Commit-0",
            "content": "# Contributing to Supauth\r\n\r\nThank you for your interest in contributing to Supauth! This document provides guidelines and information for contributors.\r\n\r\n## 🚀 Getting Started\r\n\r\n### Prerequisites\r\n- Node.js 18+\r\n- npm, yarn, or pnpm\r\n- Git\r\n- A Supabase account for testing\r\n\r\n### Development Setup\r\n\r\n1. **Fork and Clone**\r\n   ```bash\r\n   git clone https://github.com/YOUR_USERNAME/supa-auth-nextjs.git\r\n   cd supa-auth-nextjs\r\n   ```\r\n\r\n2. **Install Dependencies**\r\n   ```bash\r\n   npm install\r\n   # or\r\n   yarn install\r\n   # or\r\n   pnpm install\r\n   ```\r\n\r\n3. **Environment Setup**\r\n   ```bash\r\n   cp .env.example .env.local\r\n   # Add your Supabase credentials\r\n   ```\r\n\r\n4. **Start Development Server**\r\n   ```bash\r\n   npm run dev\r\n   ```\r\n\r\n## 📋 How to Contribute\r\n\r\n### 1. Issues\r\n- Check existing issues before creating new ones\r\n- Use issue templates when available\r\n- Provide clear reproduction steps for bugs\r\n- Include screenshots/videos when helpful\r\n\r\n### 2. Pull Requests\r\n\r\n**Before Starting:**\r\n- Comment on the issue you want to work on\r\n- Wait for maintainer confirmation\r\n- Fork the repository\r\n\r\n**Pull Request Process:**\r\n1. Create a feature branch from `main`\r\n   ```bash\r\n   git checkout -b feature/your-feature-name\r\n   ```\r\n\r\n2. Make your changes\r\n   - Follow the coding standards below\r\n   - Add tests if applicable\r\n   - Update documentation if needed\r\n\r\n3. Test your changes\r\n   ```bash\r\n   npm run lint\r\n   npm run build\r\n   ```\r\n\r\n4. Commit your changes\r\n   ```bash\r\n   git commit -m \"feat: add amazing new feature\"\r\n   ```\r\n\r\n5. Push and create PR\r\n   ```bash\r\n   git push origin feature/your-feature-name\r\n   ```\r\n\r\n### 3. Commit Convention\r\n\r\nWe use [Conventional Commits](https://www.conventionalcommits.org/):\r\n\r\n- `feat:` New features\r\n- `fix:` Bug fixes\r\n- `docs:` Documentation changes\r\n- `style:` Code style changes (formatting, etc.)\r\n- `refactor:` Code refactoring\r\n- `test:` Adding or updating tests\r\n- `chore:` Maintenance tasks\r\n\r\n## 🎨 Coding Standards\r\n\r\n### TypeScript\r\n- Use TypeScript for all new code\r\n- Provide proper type definitions\r\n- Avoid `any` types when possible\r\n\r\n### React\r\n- Use functional components with hooks\r\n- Follow React best practices\r\n- Use proper component naming (PascalCase)\r\n\r\n### Styling\r\n- Use Tailwind CSS classes\r\n- Follow existing design patterns\r\n- Ensure responsive design\r\n- Support dark/light modes\r\n\r\n### File Organization\r\n```\r\nsrc/\r\n├── app/                # Next.js app router pages\r\n├── components/         # Reusable components\r\n│   ├── ui/            # Base UI components\r\n│   └── feature/       # Feature-specific components\r\n├── lib/               # Utilities and configurations\r\n├── hooks/             # Custom React hooks\r\n└── types/             # TypeScript type definitions\r\n```\r\n\r\n## 🧪 Testing\r\n\r\n- Write tests for new features\r\n- Ensure existing tests pass\r\n- Include both unit and integration tests when applicable\r\n\r\n```bash\r\n# Run tests (when available)\r\nnpm run test\r\n\r\n# Run linting\r\nnpm run lint\r\n```\r\n\r\n## 📚 Documentation\r\n\r\n- Update README.md for significant changes\r\n- Add JSDoc comments for complex functions\r\n- Update API documentation if applicable\r\n- Include examples in documentation\r\n\r\n## 🔒 Security\r\n\r\n- Never commit sensitive information\r\n- Use environment variables for secrets\r\n- Report security issues privately\r\n- Follow security best practices\r\n\r\n## 🤝 Code Review Process\r\n\r\n1. **Automated Checks**: All PRs must pass CI/CD pipeline\r\n2. **Code Review**: At least one maintainer review required\r\n3. **Testing**: Manual testing for UI changes\r\n4. **Documentation**: Ensure docs are updated\r\n5. **Merge**: Squash and merge after approval\r\n\r\n## 📞 Getting Help\r\n\r\n- **Discussions**: Use GitHub Discussions for questions\r\n- **Issues**: Create issues for bugs and feature requests\r\n- **Discord/Slack**: Join our community (links in README)\r\n\r\n## 🏆 Recognition\r\n\r\nContributors will be:\r\n- Added to the contributors list\r\n- Mentioned in release notes\r\n- Given credit in relevant documentation\r\n\r\n## 📝 License\r\n\r\nBy contributing, you agree that your contributions will be licensed under the MIT License.\r\n\r\n---\r\n\r\nThank you for contributing to Supauth! Every contribution helps make authentication easier for developers worldwide. 🚀 "
        }
    ]
}